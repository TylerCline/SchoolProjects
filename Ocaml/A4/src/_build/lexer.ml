# 1 "lexer.mll"
 
  open Lexing
  open Parser
  open Printf

  exception Eof
  exception Syntax_err of string
	    
  let next_line lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_bol = pos.pos_cnum;
                 pos_lnum = pos.pos_lnum + 1;
      }

  let keyword_table = Hashtbl.create 42
  let _ =
    List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
              [ "def", DEF;
		"let", LET;
		"while", WHILE;
		"if", IF;
		"then", THEN;
		"else", ELSE;
		"ref", REF;
		"int", INT;
		"float", FLOAT;
		"bool", BOOL;
		"true", BOOLCONST(true);
		"false", BOOLCONST(false);
		"unit", UNIT;
		"tt", TT;
		"not", NOT;
		"in", IN ]


# 39 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\231\255\234\255\235\255\236\255\237\255\
    \238\255\001\000\002\000\241\255\002\000\001\000\245\255\246\255\
    \247\255\248\255\079\000\156\000\252\255\001\000\253\255\049\000\
    \254\255\255\255\166\000\243\255\242\255\240\255\239\255\002\000\
    \253\255\254\255\255\255\004\000\128\000\251\255\017\000\004\000\
    \254\255\255\255\006\000\253\255\252\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\023\000\022\000\255\255\026\000\026\000\255\255\255\255\
    \255\255\255\255\006\000\005\000\255\255\003\000\255\255\011\000\
    \255\255\255\255\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\004\000\004\000\
    \255\255\255\255\000\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\255\255\037\000\000\000\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\020\000\020\000\034\000\021\000\034\000\035\000\
    \041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\017\000\000\000\000\000\000\000\000\000\013\000\027\000\
    \008\000\007\000\014\000\016\000\003\000\015\000\043\000\023\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\009\000\004\000\011\000\010\000\030\000\029\000\
    \044\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\024\000\000\000\000\000\000\000\000\000\
    \025\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\006\000\012\000\005\000\028\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\041\000\000\000\000\000\042\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\038\000\000\000\000\000\000\000\018\000\039\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\026\000\000\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\021\000\031\000\000\000\035\000\031\000\
    \042\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
    \038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\023\000\255\255\255\255\255\255\255\255\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\012\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\036\000\255\255\255\255\036\000\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\036\000\255\255\255\255\255\255\018\000\036\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\019\000\255\255\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\031\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \036\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 41 "lexer.mll"
               ( comment lexbuf )
# 191 "lexer.ml"

  | 1 ->
# 42 "lexer.mll"
               ( nested_comment 0 lexbuf )
# 196 "lexer.ml"

  | 2 ->
# 43 "lexer.mll"
                                ( token lexbuf )
# 201 "lexer.ml"

  | 3 ->
# 44 "lexer.mll"
                                ( next_line lexbuf; token lexbuf )
# 206 "lexer.ml"

  | 4 ->
let
# 45 "lexer.mll"
                               lxm
# 212 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "lexer.mll"
                                   ( FLOATCONST(float_of_string lxm) )
# 216 "lexer.ml"

  | 5 ->
let
# 46 "lexer.mll"
                  lxm
# 222 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 46 "lexer.mll"
                                ( INTCONST(Int32.of_string lxm) )
# 226 "lexer.ml"

  | 6 ->
let
# 47 "lexer.mll"
                                                         id
# 232 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "lexer.mll"
               ( try
                   Hashtbl.find keyword_table id
                 with Not_found ->
                   ID id 
	       )
# 240 "lexer.ml"

  | 7 ->
# 53 "lexer.mll"
               ( DEREF )
# 245 "lexer.ml"

  | 8 ->
# 54 "lexer.mll"
               ( PLUS )
# 250 "lexer.ml"

  | 9 ->
# 55 "lexer.mll"
               ( MINUS )
# 255 "lexer.ml"

  | 10 ->
# 56 "lexer.mll"
               ( TIMES )
# 260 "lexer.ml"

  | 11 ->
# 57 "lexer.mll"
               ( DIV )
# 265 "lexer.ml"

  | 12 ->
# 58 "lexer.mll"
               ( AND )
# 270 "lexer.ml"

  | 13 ->
# 59 "lexer.mll"
               ( OR )
# 275 "lexer.ml"

  | 14 ->
# 60 "lexer.mll"
               ( LT )
# 280 "lexer.ml"

  | 15 ->
# 61 "lexer.mll"
               ( INT_EQ )
# 285 "lexer.ml"

  | 16 ->
# 62 "lexer.mll"
               ( DEFEQ )
# 290 "lexer.ml"

  | 17 ->
# 63 "lexer.mll"
               ( LPAREN )
# 295 "lexer.ml"

  | 18 ->
# 64 "lexer.mll"
               ( RPAREN )
# 300 "lexer.ml"

  | 19 ->
# 65 "lexer.mll"
               ( LBRACE )
# 305 "lexer.ml"

  | 20 ->
# 66 "lexer.mll"
               ( RBRACE )
# 310 "lexer.ml"

  | 21 ->
# 67 "lexer.mll"
               ( SEMI )
# 315 "lexer.ml"

  | 22 ->
# 68 "lexer.mll"
               ( EQ )
# 320 "lexer.ml"

  | 23 ->
# 69 "lexer.mll"
               ( COLON )
# 325 "lexer.ml"

  | 24 ->
# 70 "lexer.mll"
               ( COMMA )
# 330 "lexer.ml"

  | 25 ->
# 71 "lexer.mll"
               ( EOF )
# 335 "lexer.ml"

  | 26 ->
# 72 "lexer.mll"
               ( raise (Syntax_err ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 340 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 31
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 75 "lexer.mll"
               ( next_line lexbuf; token lexbuf )
# 352 "lexer.ml"

  | 1 ->
# 76 "lexer.mll"
               ( EOF )
# 357 "lexer.ml"

  | 2 ->
# 77 "lexer.mll"
               ( comment lexbuf )
# 362 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and nested_comment level lexbuf =
    __ocaml_lex_nested_comment_rec level lexbuf 36
and __ocaml_lex_nested_comment_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 80 "lexer.mll"
               ( next_line lexbuf; nested_comment level lexbuf )
# 374 "lexer.ml"

  | 1 ->
# 81 "lexer.mll"
               ( raise (Syntax_err "Unclosed comment") )
# 379 "lexer.ml"

  | 2 ->
# 82 "lexer.mll"
               ( nested_comment (level+1) lexbuf )
# 384 "lexer.ml"

  | 3 ->
# 83 "lexer.mll"
               ( if level = 0 then token lexbuf
    	       	 else nested_comment (level-1) lexbuf
               )
# 391 "lexer.ml"

  | 4 ->
# 86 "lexer.mll"
               ( nested_comment level lexbuf )
# 396 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_nested_comment_rec level lexbuf __ocaml_lex_state

;;

